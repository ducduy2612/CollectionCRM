version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ../../
      dockerfile: docker/base-images/api-gateway.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      # - auth-service
      # - bank-sync-service
      # - payment-service
      # - workflow-service
      - redis

  # Authentication Service
  auth-service:
    build:
      context: ../../src
      dockerfile: ../docker/base-images/node.Dockerfile
      args:
        - SERVICE_DIR=services/auth-service
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ../../src/services/auth-service/src:/app/src
      - ../../src/common:/app/common
    depends_on:
      - postgres
      - redis
      - kafka

  # Bank Synchronization Service
  bank-sync-service:
    build:
      context: ../../src
      dockerfile: ../docker/base-images/node.Dockerfile
      args:
        - SERVICE_DIR=services/bank-sync-service
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
    volumes:
      - ../../src/services/bank-sync-service/src:/app/src
      - ../../src/common:/app/common
    depends_on:
      - postgres
      - kafka
      - elasticsearch

  # Payment Processing Service
  payment-service:
    build:
      context: ../../src
      dockerfile: ../docker/base-images/node.Dockerfile
      args:
        - SERVICE_DIR=services/payment-service
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ../../src/services/payment-service/src:/app/src
      - ../../src/common:/app/common
    depends_on:
      - postgres
      - kafka
      - redis

  # Collection Workflow Service
  workflow-service:
    build:
      context: ../../src
      dockerfile: ../docker/base-images/node.Dockerfile
      args:
        - SERVICE_DIR=services/workflow-service
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ../../src/services/workflow-service/src:/app/src
      - ../../src/common:/app/common
    depends_on:
      - postgres
      - kafka
      - elasticsearch
      - redis

  # Frontend
  frontend:
    build:
      context: ../../src/frontend
      dockerfile: ../../../docker/base-images/frontend.Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - api-gateway

  # PostgreSQL
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD:-admin_password}
      - POSTGRES_DB=collectioncrm
    env_file:
      - ../config/postgres.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../../infrastructure/database:/docker-entrypoint-initdb.d
      - ../../infrastructure/database/backup:/backup
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    
  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.10.1
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${POSTGRES_ADMIN_PASSWORD:-admin_password}@postgres:5432/collectioncrm?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8090:8080"
    depends_on:
      - kafka

  # Redis - Configured with moderate RDB persistence
  redis:
    image: redis:7
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru --save "900 1" --save "300 10" --save "60 10000"
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:v1.43.0
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.33.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"

  # Grafana
  grafana:
    image: grafana/grafana:8.4.3
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SAMESITE=none
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - postgres-exporter

volumes:
  postgres-data:
  elasticsearch-data:
  zookeeper-data:
  kafka-data:
  redis-data:
  prometheus-data:
  grafana-data: