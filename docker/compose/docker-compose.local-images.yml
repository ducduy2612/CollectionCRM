version: '3.8'

x-common-config: &common-config
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    <<: *common-config
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ../config/nginx/staging-proxy-no-ssl.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - api-gateway
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    image: collectioncrm/frontend:${VERSION:-latest}
    <<: *common-config
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-/api}
    expose:
      - "8080"
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # API Gateway
  api-gateway:
    image: collectioncrm/api-gateway:${VERSION:-latest}
    <<: *common-config
    env_file:
      - ../../src/services/api-gateway/.env.staging
    environment:
      - NODE_ENV=${NODE_ENV:-staging}
      - PORT=${API_GATEWAY_PORT:-3000}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - TZ=${TZ:-Asia/Ho_Chi_Minh}
    expose:
      - "3000"
    depends_on:
      auth-service:
        condition: service_healthy
      bank-sync-service:
        condition: service_healthy
      workflow-service:
        condition: service_healthy
      campaign-engine:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Authentication Service
  auth-service:
    image: collectioncrm/auth-service:${VERSION:-latest}
    <<: *common-config
    env_file:
      - ../../src/services/auth-service/.env.staging
    environment:
      - NODE_ENV=${NODE_ENV:-staging}
      - PORT=${AUTH_SERVICE_PORT:-3001}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - TZ=${TZ:-Asia/Ho_Chi_Minh}
    expose:
      - "3001"
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Bank Synchronization Service
  bank-sync-service:
    image: collectioncrm/bank-sync-service:${VERSION:-latest}
    <<: *common-config
    env_file:
      - ../../src/services/bank-sync-service/.env.staging
    environment:
      - NODE_ENV=${NODE_ENV:-staging}
      - PORT=${BANK_SYNC_SERVICE_PORT:-3002}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - TZ=${TZ:-Asia/Ho_Chi_Minh}
    expose:
      - "3002"
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Workflow Service
  workflow-service:
    image: collectioncrm/workflow-service:${VERSION:-latest}
    <<: *common-config
    env_file:
      - ../../src/services/workflow-service/.env.staging
    environment:
      - NODE_ENV=${NODE_ENV:-staging}
      - PORT=${WORKFLOW_SERVICE_PORT:-3003}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - TZ=${TZ:-Asia/Ho_Chi_Minh}
    expose:
      - "3003"
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Campaign Engine Service
  campaign-engine:
    image: collectioncrm/campaign-engine:${VERSION:-latest}
    <<: *common-config
    env_file:
      - ../../src/services/campaign-engine/.env.staging
    environment:
      - NODE_ENV=${NODE_ENV:-staging}
      - PORT=${CAMPAIGN_ENGINE_PORT:-3004}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - TZ=${TZ:-Asia/Ho_Chi_Minh}
    expose:
      - "3004"
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Payment Service
  payment-service:
    image: collectioncrm/payment-service:${VERSION:-latest}
    <<: *common-config
    env_file:
      - ../../src/services/payment-service/.env.staging
    environment:
      - NODE_ENV=${NODE_ENV:-staging}
      - PORT=${PAYMENT_SERVICE_PORT:-3005}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - TZ=${TZ:-Asia/Ho_Chi_Minh}
    expose:
      - "3005"
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    <<: *common-config
    command: postgres -c password_encryption=md5
    env_file:
      - ../../docker/config/postgres.staging.env
    volumes:
      - postgres-local-data:/var/lib/postgresql/data
      - ../../infrastructure/database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432" 
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-${DB_USERNAME}} -d ${POSTGRES_DB:-${DB_DATABASE}}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis
  redis:
    image: redis:7-alpine
    <<: *common-config
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-local-data:/data
      - ../config/redis/redis.staging.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379" 
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    <<: *common-config
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=10
      - ZOOKEEPER_SYNC_LIMIT=5
      - TZ=${TZ:-Asia/Ho_Chi_Minh}
    volumes:
      - zookeeper-local-data:/var/lib/zookeeper/data
      - zookeeper-local-logs:/var/lib/zookeeper/log
    networks:
      - collectioncrm-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    <<: *common-config
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID:-1}
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:-1}
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_AUTO_CREATE_TOPICS_ENABLE:-true}
      - KAFKA_LOG_RETENTION_HOURS=${KAFKA_LOG_RETENTION_HOURS:-168}
      - KAFKA_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=3000
    volumes:
      - kafka-local-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "${KAFKA_PORT:-9092}:9092"  
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    <<: *common-config
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "${KAFKA_UI_PORT:-8090}:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - collectioncrm-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # PgBouncer Connection Pooler - Essential for 2000+ concurrent users
  pgbouncer:
    image: edoburu/pgbouncer:latest
    <<: *common-config
    env_file:
      - ../config/pgbouncer.staging.env
    environment:
      # Database connection (edoburu/pgbouncer format - sensitive data only)
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_DATABASE}
      - ADMIN_USERS=${DB_USERNAME}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${PGBOUNCER_PORT:-6432}:6432"
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${DB_PASSWORD} psql -h localhost -p 6432 -U ${DB_USERNAME} -d pgbouncer -c 'SHOW POOLS;'"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    <<: *common-config
    container_name: collectioncrm-minio-local
    ports:
      - "${MINIO_API_PORT:-9000}:9000"  # MinIO API
      - "${MINIO_CONSOLE_PORT:-9001}:9001"  # MinIO Console
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    volumes:
      - minio-local-data:/data
    command: server /data --console-address ":9001"
    networks:
      - collectioncrm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres-local-data:
    driver: local
  redis-local-data:
    driver: local
  zookeeper-local-data:
    driver: local
  zookeeper-local-logs:
    driver: local
  kafka-local-data:
    driver: local
  minio-local-data:
    driver: local

networks:
  collectioncrm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16