version: '3.8'

services:
  # Frontend Development Service
  frontend-dev:
    build:
      context: ../../
      dockerfile: docker/base-images/frontend-dev.Dockerfile
    ports:
      - "5173:5173"  # Vite default development port
    environment:
      # Environment variables for the frontend
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3000/api  # API Gateway URL
      - CHOKIDAR_USEPOLLING=true  # Enable polling for file changes in Docker
    volumes:
      # Mount source code for hot-reloading
      - ../../src/frontend/src:/app/src
    depends_on:
      - api-gateway
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # API Gateway (from existing docker-compose)
  api-gateway:
    build:
      context: ../../
      dockerfile: docker/base-images/api-gateway.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret}
      - AUTH_SERVICE_URL=http://auth-service:3000
      - BANK_SERVICE_URL=http://bank-sync-service:3002
      - AUTH_SERVICE_TIMEOUT=60000
      - RATE_LIMIT_MAX_REQUESTS=100
      - RATE_LIMIT_WINDOW_MS=900000
      - CORS_ORIGIN=http://localhost:5173  # Updated for Vite dev server
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ../../src/services/api-gateway/src:/app/services/api-gateway/src
    depends_on:
      - auth-service
      - bank-sync-service
      - redis
    networks:
      - collectioncrm-network

  # Authentication Service
  auth-service:
    build:
      context: ../../
      dockerfile: docker/base-images/auth-service.Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=collectioncrm
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_ADMIN_PASSWORD:-admin_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret}
      - JWT_EXPIRATION=1h
      - SESSION_TTL=86400
      - LOG_LEVEL=debug
      - CORS_ORIGIN=http://localhost:5173  # Updated for Vite dev server
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ../../src/services/auth-service/src:/app/services/auth-service/src
    depends_on:
      - postgres
      - redis
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # Bank Synchronization Service
  bank-sync-service:
    build:
      context: ../../
      dockerfile: docker/base-images/bank-sync-service.Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=${POSTGRES_ADMIN_PASSWORD:-admin_password}
      - DB_DATABASE=collectioncrm
      - PORT=3002
      - API_PREFIX=/api/v1/bank-sync
      - LOG_LEVEL=debug
      - CORS_ORIGIN=http://localhost:5173  # Updated for Vite dev server
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ../../src/services/bank-sync-service:/app/services/bank-sync-service
    depends_on:
      - postgres
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # PostgreSQL
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD:-admin_password}
      - POSTGRES_DB=collectioncrm
    env_file:
      - ../../docker/config/postgres.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../../infrastructure/database:/docker-entrypoint-initdb.d
      - ../../infrastructure/database/backup:/backup
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru --save "900 1" --save "300 10" --save "60 10000"
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - collectioncrm-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  frontend-node-modules:  # Named volume for better performance

networks:
  collectioncrm-network:
    driver: bridge