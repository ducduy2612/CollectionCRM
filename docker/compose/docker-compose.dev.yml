version: '3.8'

services:
  # Frontend Development Service
  frontend-dev:
    build:
      context: ../../
      dockerfile: docker/base-images/frontend-dev.Dockerfile
    ports:
      - "5173:5173"  # Vite default development port
    env_file:
      - ../../src/frontend/.env
    environment:
      - CHOKIDAR_USEPOLLING=true  # For Docker file watching
    volumes:
      # Mount source code for hot-reloading
      - ../../src/frontend/src:/app/src
    depends_on:
      - api-gateway
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # API Gateway (from existing docker-compose)
  api-gateway:
    build:
      context: ../../
      dockerfile: docker/base-images/api-gateway.Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ../../src/services/api-gateway/.env
    environment:
      - CHOKIDAR_USEPOLLING=true  # For Docker file watching
    volumes:
      - ../../src/services/api-gateway/src:/app/services/api-gateway/src
    depends_on:
      - auth-service
      - bank-sync-service
      - redis
    networks:
      - collectioncrm-network

  # Authentication Service
  auth-service:
    build:
      context: ../../
      dockerfile: docker/base-images/auth-service.Dockerfile
    ports:
      - "3001:3000"
    env_file:
      - ../../src/services/auth-service/.env
    environment:
      - CHOKIDAR_USEPOLLING=true  # For Docker file watching
    volumes:
      - ../../src/services/auth-service/src:/app/services/auth-service/src
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # Bank Synchronization Service
  bank-sync-service:
    build:
      context: ../../
      dockerfile: docker/base-images/bank-sync-service.Dockerfile
    ports:
      - "3002:3002"
    env_file:
      - ../../src/services/bank-sync-service/.env
    environment:
      - CHOKIDAR_USEPOLLING=true  # For Docker file watching
    volumes:
      - ../../src/services/bank-sync-service:/app/services/bank-sync-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # PostgreSQL
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD:-admin_password}
      - POSTGRES_DB=collectioncrm
      - AUTO_RESTORE_ON_INIT=${AUTO_RESTORE_ON_INIT:-true}
    env_file:
      - ../../docker/config/postgres.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../../infrastructure/database/00-restore-latest-backup.sh:/docker-entrypoint-initdb.d/00-restore-latest-backup.sh
      - ../../infrastructure/database/backup:/backup
      - ../../infrastructure/database/init:/docker-entrypoint-initdb.d/init
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru --save "900 1" --save "300 10" --save "60 10000"
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    user: root
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - collectioncrm-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    user: root
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - collectioncrm-network
    restart: unless-stopped

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8090:8080"
    depends_on:
      - kafka
    networks:
      - collectioncrm-network

volumes:
  postgres-data:
  redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:

networks:
  collectioncrm-network:
    driver: bridge